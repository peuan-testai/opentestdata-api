from .. import db
from . import TestDatum
from .base import BaseModel


class Test(BaseModel):
    __tablename__ = 'tests'

    # fields
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(length=160), nullable=False)

    private_fields = []
    # data is added manually in to_obj
    public_fields = ['name', 'user_id', 'created_at']

    # relationships
    author = db.relationship('User', back_populates='tests', foreign_keys=[user_id])
    data = db.relationship('TestDatum', back_populates='test', uselist=False, foreign_keys=lambda: TestDatum.test_id)

    def __repr__(self):
        data_repr = map(lambda td: f'{td.label}: {td.datum.__repr__()}', self.data)
        return (f"<Test #{self.id} '{self.name}' ({self.author.username})"
                f"\n   {data_repr}\n>")

    def to_obj(self, *args, **kwargs):
        obj = super().to_obj(*args, **kwargs)
        obj['data'] = {}
        for td in self.data:
            obj['data'][td.label] = td.datum.to_obj(*args, **kwargs)
            obj['data'][td.label]['disposition'] = td.disposition.value
        return obj
