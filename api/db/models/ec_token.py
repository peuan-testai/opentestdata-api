from secrets import token_urlsafe
from .. import db
from ...mail import Email
from .base import BaseModel


class EmailConfirmationToken(BaseModel):
    __tablename__ = 'ec_tokens'

    # fields
    token = db.Column(db.String(32), unique=True, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)

    private_fields = ['email', 'password_hash', 'is_admin',
                      'is_email_confirmed']
    public_fields = ['username', 'avatar_url']

    # relationships
    user = db.relationship('User', back_populates='ec_token')

    def __repr__(self):
        return (
            "<EmailConfirmation '%s' for user '%s' (%s)>" %
            (self.token, self.user.username, self.user.email)
        )

    def generate_token(self):
        self.token = token_urlsafe(16)

    def send_email(self, confirmation_url):
        Email.send_confirmation_email(self.user.email, confirmation_url, self.token)

    @staticmethod
    def confirm(token):
        ec_token = EmailConfirmationToken.query.filter_by(token=token).first()
        if ec_token is None:
            raise Exception('Tried to confirm email with token "%s" but token '
                            'was not found in the database.' % token)

        user = ec_token.user
        user.is_email_confirmed = True
        db.session.delete(ec_token)
        db.session.commit()
        return user
