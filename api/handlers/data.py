from json import JSONDecodeError
from werkzeug.exceptions import BadRequest, Unauthorized
from ..db.models import Datum, DatumType
from .auth import auth
from .util import get_datum


@auth()
def create(auth_user, body):
    try:
        datum = Datum.create(author=auth_user,
                             name=body.get('name'),
                             type=DatumType(body.get('type')),
                             value=body.get('value'))
    except JSONDecodeError:
        raise BadRequest('Could not decode JSON from the value field')
    except Exception as e:
        err_msg = str(e)
        raise BadRequest(f'Could not add datum: {err_msg}')

    return datum.to_obj(whos_asking=auth_user)


@auth()
@get_datum()
def detail(datum, auth_user):
    return datum.to_obj(whos_asking=auth_user)


@auth()
@get_datum()
def update(datum, auth_user, body):
    if not auth_user.is_admin and auth_user.id != datum.user_id:
        raise Unauthorized("You don't have permission to update that datum")

    try:
        datum.update(name=body.get('name'),
                     type=DatumType(body.get('type')),
                     value=body.get('value'))
    except Exception as e:
        raise BadRequest(f'Could not add datum: {e}')

    return datum.to_obj(whos_asking=auth_user)
