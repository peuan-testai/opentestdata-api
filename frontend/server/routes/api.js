/**
 * @fileoverview Routes to api.opentestdata.org
 *
 * Saves user's JWT token in session store on login; it is used to authenticate calls to api.opentestdata.org
 * Namespaced by app.js under /api
 */

const express = require('express')
const axios = require('axios')

const { API_BASE_URL } = require('../utils/constants')

const router = express.Router()


/** Creates a new user */
router.post('/users', async function (req, res, next) {
    if (req.body) {
        const { email, username, password, bio, email_confirmation_url } = req.body
        const data = { email, username, password, bio, email_confirmation_url }

        console.log(req.body)
        console.log("-------")

        // POST /users
        const apiResponse = await axios.post(API_BASE_URL + '/users', data)
            .catch(error => {
                if (error.response) {
                    const { status, data } = error.response
                    return res.status(status).send(data)
                }
            })

        if (apiResponse) {
            // 200
            return res.status(200).send(apiResponse.data)
        }
    }

    next() // 404
})


/** Login route, saves JWT token and logged in user_id in session store */
router.post('/users/login', async function (req, res, next) {
    if (req.session) {
        const data = {
            username: req.body.username,
            password: req.body.password,
        }

        // POST /users/login
        const apiResponse = await axios.post(API_BASE_URL + '/users/login', data)
            .catch(error => {
                if (error.response) {
                    const { status, data } = error.response
                    res.status(status).send(data)
                }
            })

        if (apiResponse) {
            const { user_id, token } = await apiResponse.data

            // store response in session object
            req.session.user_id = user_id
            req.session.jwt_token = token

            // 200
            return res.status(200).send({
                user_id,
            })
        }
    }

    next() // 404
})


/** Logout route, session destroy */
router.post('/users/logout', function (req, res, next) {
    if (req.session) {
        // destroy session
        req.session.destroy()

        // 200
        return res.status(200).send()
    }

    next() // 404
})


/** Grabs user information of the logged in user */
router.get('/users/me', async function (req, res, next) {
    if (req.session && req.session.jwt_token && req.session.user_id) {
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${req.session.jwt_token}`,
        }

        // GET /users/<user_id>
        const apiResponse = await axios.get(API_BASE_URL + '/users/' + req.session.user_id, { headers })
            .catch(error => {
                if (error.response) {
                    const { status, data } = error.response
                    return res.status(status).send(data)
                }
            })

        if (apiResponse) {
            // 200
            return res.status(200).send(apiResponse.data)
        }
    }

    next() // 404
})


/** All other requests route through here */
// POST requests
router.post('/*', async function (req, res, next) {
    if (req.session && req.session.jwt_token) {
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${req.session.jwt_token}`,
        }

        // POST to route
        const apiResponse = await axios.post(API_BASE_URL + '/' + req.params[0], JSON.stringify(req.body), { headers })
            .catch(error => {
                if (error.response) {
                    const { status, data } = error.response
                    return res.status(status).send(data)
                }
            })

        if (apiResponse) {
            // 200
            return res.status(200).send(apiResponse.data)
        }
    }

    next() // 404
})

// GET requests
router.get('/*', async function (req, res, next) {
    if (req.session && req.session.jwt_token) {
        const headers = {
            'Authorization': `Bearer ${req.session.jwt_token}`,
        }

        // GET from route
        const apiResponse = await axios.get(API_BASE_URL + '/' + req.params[0], { headers })
            .catch(error => {
                if (error.response) {
                    const { status, data } = error.response
                    return res.status(status).send(data)
                }
            })

        if (apiResponse) {
            // 200
            return res.status(200).send(apiResponse.data)
        }
    }

    next() // 404
})


/** Module exports */
module.exports = router
