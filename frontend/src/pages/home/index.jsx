/**
 * @fileoverview OpenTestData Home Page
 */

import React from 'react'

import UsersApi from 'api/usersApi'
import DataApi from 'api/dataApi'

import Icon from 'components/icon'

import { DATUM_TYPE } from 'utils/constants'

export default class Home extends React.Component {

    constructor(props) {
        super(props)
        this.login = this.login.bind(this)
        this.logout = this.logout.bind(this)
        this.create = this.create.bind(this)
        this.get = this.get.bind(this)
        this.datum = this.datum.bind(this)
        this.forms = {
            login: {
                username: React.createRef(),
                password: React.createRef(),
            },
            create: {
                email: React.createRef(),
                username: React.createRef(),
                password: React.createRef(),
                bio: React.createRef(),
            },
            datum: {
                name: React.createRef(),
                type: React.createRef(),
                value: React.createRef(),
            }
        }
        this.state = this.defaultState
        this.setDatumType = this.setDatumType.bind(this)
        this.setDatumValue = this.setDatumValue.bind(this)
    }


    get defaultState() {
        return {
            user_id: null,
            registered: false,
            logged_in: false,
            details: {},
            forms: {
                datum: {
                    error: null,
                    type: null,
                }
            },
        }
    }

    componentWillUnmount() {
        if (this.apiPromise) this.apiPromise.cancel()
    }

    login(e) {
        e.preventDefault()

        const { username, password } = this.forms.login

        this.apiPromise = UsersApi.login(
            username.current && username.current.value,
            password.current && password.current.value,
        )
        this.apiPromise.promise
            .then(res => res.json())
            .then(result => {
                console.log("LOGIN", result)
                if (result.user_id) { // TODO: request API "success" or "failed" status
                    const { user_id } = result
                    this.setState({
                        user_id,
                        logged_in: true,
                    }, () => {
                        this.get()
                    })
                }
            })
    }

    logout(e) {
        e.preventDefault()
        this.apiPromise = UsersApi.logout()
        this.apiPromise.promise
            .then(res => {
                console.log("LOGOUT")
                this.setState({
                    logged_in: false, // should be a page change instead
                })
            })
    }

    create(e) {
        e.preventDefault()

        const { email, username, password, bio } = this.forms.create

        this.apiPromise = UsersApi.create(
            email.current && email.current.value,
            email.current && username.current.value,
            password.current && password.current.value,
            bio.current && bio.current.value,
        )
        this.apiPromise.promise
            .then(res => res.json())
            .then(result => {
                CONSOLE.log("CREATE", result)
                this.setState({
                    registered: true,
                })
            })
    }

    get() {
        this.apiPromise = UsersApi.get(this.state.user_id)
        this.apiPromise.promise
            .then(res => res.json())
            .then(result => {
                if (result.id) { // TODO: request API "success" or "failed" status
                    this.setState({
                        details: result,
                    })
                }
            })
    }

    datum(e) {
        e.preventDefault()
        const { name, value, type } = this.forms.datum
        this.apiPromise = DataApi.create(
            name.current && name.current.value,
            type.current && type.current.value,
            value.current && value.current.value,
        )
        this.apiPromise.promise
            .then(res => res.json())
            .then(result => {
                if (result.id) { // TODO: request API "success" or "failed" status
                    this.setState({
                        details: Object.assign(this.state.details, {
                            data: [...this.state.details.data, {
                                name: name.current && name.current.value,
                                type: type.current && type.current.value,
                                value: value.current && value.current.value,
                            }]
                        })
                    })
                } else {
                    this.setState({
                        forms: {
                            datum: {
                                ...this.state.forms.datum,
                                error: result.detail,
                            },
                        }
                    })
                }
            })
    }

    setDatumType(e) {
        const { type } = this.forms.datum
        this.setState({
            forms: {
                datum: {
                    ...this.state.forms.datum,
                    type: type.current && type.current.value,
                }
            }
        })
    }

    setDatumValue(e) {
        const { value } = this.forms.datum
        console.log(e.target.value, value, "HUH")
        this.setState({
            forms: {
                datum: {
                    ...this.state.forms.datum,
                    value: value.current && value.current.value,
                }
            }
        })
    }

    render() {
        const { avatar_url, bio, created_at, data=[], id, is_admin, is_email_confirmed, updated_at, username } = this.state.details
        // TODO: ask about user email

        return <>
            <h1>OpenTestData</h1>
            {!this.state.logged_in && <section>
                <h2>Login</h2>
                <form onSubmit={this.login}>
                    <div>
                        <label htmlFor="username">Username:</label>
                        <input ref={this.forms.login.username} type="text" name="username" />
                    </div>
                    <div>
                        <label htmlFor="password">Password:</label>
                        <input ref={this.forms.login.password} type="text" name="password" />
                    </div>
                    <button type="submit">Login</button>
                </form>
            </section>}
            {!this.state.logged_in && <section>
                <h2>Create a new user</h2>
                <form onSubmit={this.create}>
                    <div>
                        <label htmlFor="email">Email:</label>
                        <input ref={this.forms.create.email} type="text" name="email" />
                    </div>
                    <div>
                        <label htmlFor="username">Username:</label>
                        <input ref={this.forms.create.username} type="text" name="username" />
                    </div>
                    <div>
                        <label htmlFor="password">Password:</label>
                        <input ref={this.forms.create.password} type="text" name="password" />
                    </div>
                    <div>
                        <label htmlFor="bio">Bio:</label>
                        <textarea ref={this.forms.create.bio} name="bio"></textarea>
                    </div>
                    <button type="submit">Register</button>
                </form>
            </section>}
            {this.state.logged_in && this.state.details && <section>
                <h2>User Details</h2>
                <button onClick={this.logout}>Logout</button>
                <h3>{username} <small>(user_id: {id})</small></h3>
                <Icon>{is_email_confirmed ? `\u2714 User verified` : `\u2716 Not verified`}</Icon>
                <h4>{is_admin ? 'Administrator' : 'Contributor'}</h4>
                <img src={avatar_url} />
                <p>{bio}</p>
                <ul>
                    <li>User joined: {created_at}</li>
                    <li>Profile last updated: {updated_at}</li>
                </ul>
                <h4>Contributions</h4>
                <ul>
                    {data && data.map((datum, i) => {
                        const { name, type, value } = datum
                        return <li key={name+type+i}><strong>{name}</strong><br/>{type}<br/>{JSON.stringify(value)}</li>
                    })}
                </ul>
            </section>}
            {this.state.logged_in && <section>
                <h2>Create Test Datum</h2>
                {this.state.forms.datum.error}
                <form onSubmit={this.datum} id="form--create-datum">
                    <div>
                        <label htmlFor="name">Name:</label>
                        <input ref={this.forms.datum.name} type="text" name="name" />
                    </div>
                    <div>
                        <label htmlFor="type">Type:</label>
                        <select ref={this.forms.datum.type} name="type" defaultValue="NULL" onChange={this.setDatumType}>
                            <option value="NULL">NULL</option>
                            <option value="BOOL">BOOLEAN</option>
                            <option value="NUM">NUMBER</option>
                            <option value="STR">STRING</option>
                            <option value="OBJ">OBJECT</option>
                        </select>
                    </div>
                    {(this.state.forms.datum.type !== DATUM_TYPE.OBJECT && this.state.forms.datum.type !== DATUM_TYPE.BOOLEAN) && <div>
                        <label htmlFor="value">Value:</label>
                        <input ref={this.forms.datum.value} type={this.state.forms.datum.type === DATUM_TYPE.NUMBER ? 'number':'text'} name="value" onChange={this.setDatumValue} />
                    </div>}
                    {this.state.forms.datum.type === DATUM_TYPE.BOOLEAN && <div>
                        <label htmlFor="value">Value:</label>
                        <select ref={this.forms.datum.value} name="value" defaultValue="true" onChange={this.setDatumValue}>
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                    </div>}
                    {this.state.forms.datum.type === DATUM_TYPE.OBJECT && <div>
                        <label htmlFor="value">Object:</label>
                        <select ref={this.forms.datum.value} name="value" defaultValue={[]} onChange={this.setDatumValue} multiple size={data.length}>
                            {data.map((datum, i) => {
                                let { name, type, value, id } = datum
                                const optionValue = JSON.stringify({[name]: id})
                                if (type === DATUM_TYPE.OBJECT) {
                                    const objValue = value
                                    return (
                                        <optgroup label={`${name} [${type}]`}>
                                            {Object.keys(objValue).map(datum => {
                                                const { name, type, value, id } = objValue[datum]
                                                const optionValue = JSON.stringify({[name]: id})
                                                return (
                                                    <option className="objDatum" value={optionValue} data-label={`[${type}] ${name}`}>
                                                        &nbsp;&nbsp;&nbsp;&nbsp;{value}
                                                    </option>
                                                )
                                            })}
                                        </optgroup>
                                    )
                                }
                                return (
                                    <option className="datumOption" data-label={`${name} [${type}]`}>
                                        &nbsp;&nbsp;{value}
                                    </option>
                                )
                            })}
                        </select>
                    </div>}
                    {/*<div>
                        <label htmlFor="disposition">Disposition:</label>
                        <select ref={this.forms.datum.disposition} name="disposition" defaultValue="NEUTRAL">
                            <option value="NEUTRAL">NEUTRAL</option>
                            <option value="POS">POSITIVE</option>
                            <option value="NEG">NEGATIVE</option>
                            <option value="EDGE">EDGE</option>
                            <option value="DESTRUCTIVE">DESTRUCTIVE</option>
                        </select>
                    </div>*/}
                    <button type="submit">Submit</button>
                </form>
            </section>}
        </>
    }
}

